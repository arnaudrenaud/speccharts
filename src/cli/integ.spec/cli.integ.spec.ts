import fsExtra from "fs-extra";
import path from "path";
import { getRunCli } from "./utils";
import { GENERATED_BY_SPECCHARTS_LABEL } from "../../chart-files/constants";

const TEST_TMP_ROOT_DIR = path.resolve(__dirname, ".tmp.cli-tests");
const SPEC_FILES_DIRECTORY_FULL_PATH = path.join(TEST_TMP_ROOT_DIR, "src");
const SPEC_FILE_NAME = "cli-example.spec.ts";
const SPEC_FILE_PATH = path.join(
  SPEC_FILES_DIRECTORY_FULL_PATH,
  SPEC_FILE_NAME
);

const SPEC_FILE_CONTENT = `describe("some test suite", () => {
  it("implements behavior", () => {});
});`;

const SPEC_GLOB = `src/**/*.spec.ts`;

const SINGLE_OUTPUT_FILE = path.join(TEST_TMP_ROOT_DIR, "cli-output.md");

async function cleanUpLocalFileSystem() {
  await fsExtra.remove(TEST_TMP_ROOT_DIR);
}

const runCli = getRunCli(TEST_TMP_ROOT_DIR);

describe("speccharts CLI (integration tests)", () => {
  beforeEach(async () => {
    await cleanUpLocalFileSystem();
    await fsExtra.outputFile(SPEC_FILE_PATH, SPEC_FILE_CONTENT);
  });

  afterAll(async () => {
    await cleanUpLocalFileSystem();
  });

  describe("when passed `--single-output-file`", () => {
    it("writes a single Markdown file with all charts", async () => {
      const { stdout, stderr, exitCode } = await runCli([
        "--input-file-patterns",
        SPEC_GLOB,
        "--single-output-file",
        SINGLE_OUTPUT_FILE,
      ]);

      expect(exitCode).toBe(0);
      expect(stderr).toBe("");

      expect(stdout).toContain("Input file patterns:");
      expect(stdout).toContain("single Markdown file with all charts");

      expect(await fsExtra.pathExists(`${SPEC_FILE_PATH}.mmd`)).toBe(false);
      expect(await fsExtra.pathExists(SINGLE_OUTPUT_FILE)).toBe(true);

      const fileContent = await fsExtra.readFile(SINGLE_OUTPUT_FILE, "utf8");
      expect(fileContent).toContain("# speccharts");
      expect(fileContent).toContain("```mermaid");
      expect(fileContent).toContain("implements behavior");
    });
  });

  describe("when passed `--multiple-output-files`", () => {
    it("writes Mermaid files next to spec files and prints command header", async () => {
      const { stdout, stderr, exitCode } = await runCli([
        "--input-file-patterns",
        SPEC_GLOB,
        "--multiple-output-files",
      ]);

      expect(exitCode).toBe(0);
      expect(stderr).toBe("");

      expect(stdout).toContain("Input file patterns:");
      expect(stdout).toContain("Wrote 1 chart file");

      const chartFilePath = `${SPEC_FILE_PATH}.mmd`;
      expect(await fsExtra.pathExists(chartFilePath)).toBe(true);
      expect(await fsExtra.pathExists(SINGLE_OUTPUT_FILE)).toBe(false);

      const chartContent = await fsExtra.readFile(chartFilePath, "utf8");
      expect(chartContent).toContain("implements behavior");
    });
  });

  describe("when passed `--multiple-output-files` and `--delete-existing-charts`", () => {
    it("deletes existing chart files before writing new ones", async () => {
      const staleChartPath = `${SPEC_FILE_PATH}.stale.mmd`;
      await fsExtra.outputFile(
        staleChartPath,
        `flowchart TD\n%% ${GENERATED_BY_SPECCHARTS_LABEL}\n`
      );

      const { stdout, stderr, exitCode } = await runCli([
        "--input-file-patterns",
        SPEC_GLOB,
        "--multiple-output-files",
        "--delete-existing-charts",
      ]);

      expect(exitCode).toBe(0);
      expect(stderr).toBe("");
      expect(stdout).toContain("Deleted 1 existing chart file");

      expect(await fsExtra.pathExists(staleChartPath)).toBe(false);
      expect(await fsExtra.pathExists(`${SPEC_FILE_PATH}.mmd`)).toBe(true);
    });
  });

  describe("when passed both `--single-output-file` and `--multiple-output-files`", () => {
    it("exits with an error without writing files", async () => {
      const { stdout, stderr, exitCode } = await runCli([
        "--input-file-patterns",
        SPEC_GLOB,
        "--single-output-file",
        SINGLE_OUTPUT_FILE,
        "--multiple-output-files",
      ]);

      expect(exitCode).toBe(1);
      expect(stdout).toBe("");
      expect(stderr).toContain(
        "❌ Error: Cannot specify both --single-output-file and --multiple-output-files."
      );

      expect(await fsExtra.pathExists(`${SPEC_FILE_PATH}.mmd`)).toBe(false);
      expect(await fsExtra.pathExists(SINGLE_OUTPUT_FILE)).toBe(false);
    });
  });

  describe("when passed no output flag", () => {
    it("prints a single Markdown document to stdout", async () => {
      const { stdout, stderr, exitCode } = await runCli([
        "--input-file-patterns",
        SPEC_GLOB,
      ]);

      expect(exitCode).toBe(0);
      expect(stderr).toBe("");

      const chartPath = `${SPEC_FILE_PATH}.mmd`;
      expect(await fsExtra.pathExists(chartPath)).toBe(false);
      expect(await fsExtra.pathExists(SINGLE_OUTPUT_FILE)).toBe(false);

      expect(stdout).toContain("```mermaid");
      expect(stdout).toContain("implements behavior");
      expect(stdout).toContain("Generated by speccharts");
    });
  });

  describe("when passed `--delete-existing-charts` without an output flag", () => {
    it("exits with an error", async () => {
      const { stdout, stderr, exitCode } = await runCli([
        "--input-file-patterns",
        SPEC_GLOB,
        "--delete-existing-charts",
      ]);

      expect(exitCode).toBe(1);
      expect(stdout).toBe("");
      expect(stderr).toContain(
        "❌ Error: --delete-existing-charts can only be used when writing charts to files."
      );
    });
  });
});
